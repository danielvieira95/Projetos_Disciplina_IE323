from machine import Pin, I2C, ADC
from ssd1306 import SSD1306_I2C
import framebuf
import neopixel
import utime

WIDTH = 128  # Largura do display oLED
HEIGHT = 64  # Altura do display oLED

# Modos de funcionamento do programa
NO_MODE = 0
MODE_DELAY = 1
MODE_TIMER = 2

pressed_button_counter = 0
button_state = 0
mode_selected = 0

# Configuração do display oLED
i2c = I2C(1, scl=Pin(15), sda=Pin(14), freq=400000)
oled = SSD1306_I2C(WIDTH, HEIGHT, i2c)

# Apaga todo o display
oled.fill(0)
oled.show()

# Salva os arrays de bytes com as imagens que serão exibidas no display oLED futuramente
sleeping_snoopy = bytearray(b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xf1\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xe0\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xbe\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\x7f\x7f\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xfe\xff\xbf\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xdf\xff\xff\xe6\xff\xff\xff\xc0\xff\xff\xff\xff\xdf\xff\xff\xcf\x7f\xff\xff\xc0\xff\xff\xff\xff\xdf\xff\xff\xcf\x7f\xff\xff\xc0\xff\xff\xff\xff\xdf\xf8\x8f\xed\xff\xff\xff\xc0\xff\xff\xfe\xff\xdf\xef\xfb\xef\xff\xff\xff\xc0\xff\xff\xfe\xff\xdf\xbf\xfd\xef\xff\xff\xff\xc0\xff\xff\xfd\xff\xde\xff\xfe\xcf\xff\xff\xff\xc0\xff\xff\xfd\xdf\xfd\xff\xff\x5f\xff\xff\xff\xc0\xff\xff\xff\xff\xf3\xff\xff\xb7\xff\xff\xff\xc0\xff\xff\xff\xff\xf3\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xfb\xff\xff\xff\x7f\xff\xff\xc0\xff\xff\xfd\xff\xfb\xe3\x3f\xff\x7f\xff\xff\xc0\xff\xff\xfd\xff\xf3\xff\xdf\xc0\x3f\xff\xff\xc0\xff\xff\xfe\xfe\x1c\x1f\xef\xff\xbf\xff\xff\xc0\xff\xff\xfc\x00\x7f\xf7\xef\xff\xff\xff\xff\xc0\xff\xff\xfb\xfc\x7f\xfc\xcf\xff\xff\xff\xff\xc0\xff\xff\xfb\xfc\x7f\xff\x1f\xff\xdf\xff\xff\xc0\xff\xff\xfb\xfc\x7f\xff\xff\xff\xdf\xff\xff\xc0\xff\xff\xfb\xfc\x3f\xff\xf8\x01\xdf\xff\xff\xc0\xff\xff\xfb\xfc\x3c\x20\x07\xff\xef\xff\xff\xc0\xff\xff\xfe\x0c\x27\xff\xff\xff\xef\xff\xff\xc0\xff\xff\xf7\xfc\x3f\xff\xff\xff\xef\xff\xff\xc0\xff\xff\xf7\xfc\x3f\xff\xff\xff\xf7\xff\xff\xc0\xff\xff\xf7\xfe\x3f\xff\xff\xff\xf7\xff\xff\xc0\xff\xff\xf7\xff\x7f\xff\xff\xff\xfb\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xfb\xff\xff\xc0\xff\xff\xef\xff\xff\xff\xff\xe3\xff\xff\xff\xc0\xff\xff\xef\x00\x70\x00\x00\x3e\x0d\xff\xff\xc0\xff\xff\xef\xff\xff\xff\xff\xff\xfe\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0') 
awaken_snoopy = bytearray(b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\x9f\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\x80\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xf0\x00\x7f\x3f\xff\xff\xff\xc0\xff\xff\xff\xff\xcf\xff\xff\x9f\xff\xff\xff\xc0\xff\xff\xff\xff\xbf\xff\xff\xdf\xff\xff\xff\xc0\xff\xff\xff\xff\x3f\xff\xff\xef\xff\xff\xff\xc0\xff\xff\xff\xff\x7f\xff\xff\xef\xff\xff\xff\xc0\xff\xff\xff\xf0\xff\xfb\xff\xf7\xff\xff\xff\xc0\xff\xff\xff\xee\xff\xfb\xff\xf7\xff\xff\xff\xc0\xff\xff\xff\xe8\xff\xff\xff\xf7\xff\xff\xff\xc0\xff\xff\xff\xe0\xff\xff\xff\x8b\xff\xff\xff\xc0\xff\xff\xff\xf0\xff\xff\xfd\x03\xff\xff\xff\xc0\xff\xff\xff\xff\x7f\xff\xf8\x0b\xff\xff\xff\xc0\xff\xff\xff\xff\x9f\xff\xf8\x0b\xff\xff\xff\xc0\xff\xff\xff\xff\xe7\xff\xf0\x0b\xff\xff\xff\xc0\xff\xff\xff\xff\xf8\xff\xf0\x17\xff\xff\xff\xc0\xff\xff\xff\xff\xff\x3f\xf0\x07\xff\xff\xff\xc0\xff\xff\xff\xff\xff\x9f\xf0\x0f\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xef\x84\x1f\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xef\x78\x7f\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xee\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xc1\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\x9c\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\x3d\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\x7e\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xfe\xfe\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xfc\xfe\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xfd\xfe\x7f\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xfd\xee\x7f\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xfb\xee\x7f\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xfb\xec\x7f\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xf9\xe0\x3f\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xfe\x7a\x2f\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xbe\xdf\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xbe\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xf0\x36\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xdf\xf6\x7f\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xb9\xef\xbf\xff\xff\xff\xff\xc0\xff\xff\xff\xff\x83\xff\xdf\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xf6\xbf\xdf\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xfc\x00\x3f\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc0')

# Configuração do botão A
button_a = Pin(5, Pin.IN, Pin.PULL_UP)

# Configuração da matriz de LEDs
np = neopixel.NeoPixel(Pin(7), 25)

# Inicializa a matriz com todos os LEDs apagados
for i in range(25):
    np[i] = (0, 0, 0)
np.write()

# Configuração do joystick
adc_x = ADC(Pin(27))

# Define os valores mínimos e máximos dos conversores AD do joystick e também o valor médio
adc_min = 176
adc_max = 65263
adc_mean_x = ((adc_max - adc_min)/2)

# Define um limiar para determinar uma mudança significativa do joystick
threshold = 1000

def check_button():
    global button_a, pressed_button_counter, button_state
    if (button_a.value() == 0) & (button_state == 0):
        pressed_button_counter += 1
        button_state = 1
    elif (button_a.value() == 1) & (button_state == 1):
        button_state = 0
    
def display_update(snoopy):
    global pressed_button_counter
    oled.fill(0)
    oled.text("Contador: " + str(pressed_button_counter), 22, 3)
    fbuf_snoopy = framebuf.FrameBuffer(snoopy, 90, 45, framebuf.MONO_HLSB) # Objeto que contém a imagem formada pelos bytes que vão compor a imagem, com altura e largura definidos
    oled.blit(fbuf_snoopy, 22, 18) # Imagem vai aparecer em x = 22 e y = 18
    oled.show()
    utime.sleep_us(1)

def blink_on():
    for i in range(25):
        np[i] = (10, 0, 0)
    np.write()

def blink_off():
    for i in range(25):
        np[i] = (0, 0, 0)
    np.write()

def select_mode():
    # Tela de início
    global mode_selected, NO_MODE, MODE_DELAY, MODE_TIMER
    oled.fill(0)
    oled.text("Escolha um modo:", 0, 10)
    oled.text("Delay <---", 0, 30)
    oled.text("---> Timer ", 50, 50)
    oled.show()
    while (mode_selected == NO_MODE):
        adc_value_x = adc_x.read_u16()
        if (adc_value_x > (adc_mean_x + threshold)):
            mode_selected = MODE_DELAY
            oled.fill(0)
            oled.text("Modo delay", 0, 30)
            oled.show()
            utime.sleep(3)
        elif (adc_value_x < (adc_mean_x - threshold)):
            mode_selected = MODE_TIMER
            oled.fill(0)
            oled.text("Modo timer", 0, 30)
            oled.show()
            utime.sleep(3)

while True:
    select_mode()
    if (mode_selected == MODE_DELAY):
        i = 0
        for i in range(6):
            check_button()
            button_state = 0
            display_update(sleeping_snoopy)
            blink_on()
            utime.sleep(3)
            check_button()
            button_state = 0
            display_update(sleeping_snoopy)
            blink_off()
            utime.sleep(3)
            i += 1
        pressed_button_counter = 0
        mode_selected = NO_MODE
    elif (mode_selected == MODE_TIMER):
        oled.fill(0)
        oled.text("Ops...", 0, 4)
        oled.text("Ainda nao", 0, 16)
        oled.text("esta pronto...", 0, 28)
        oled.text("Mas olha", 0, 40)
        oled.text("esse Snoopy", 0, 52)
        oled.show()
        utime.sleep(3)
        display_update(awaken_snoopy)
        oled.show()
        utime.sleep(5)
        mode_selected = NO_MODE